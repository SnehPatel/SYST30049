Week 4

Domain modeling
  - The domain model defines the structure, elements and rules of a common, ubiquitous language
  - An ubiquitous language is the all-encompassing language of the project
    - It defines the common terminology used in requirements, design and implementation
    - It is shared by developers, domain experts, all technology and business shareholders
  - "The model is not the diagram. The diagram's purpose is to help communicate and explain the model"

Creating an ubiquitous language
  - Use nouns(concepts) and verbs(actions) from the business domain defined clearly
  - Use technical terms that define system responses and behavior important to domain experts
    - notifications, requests, persistence
  - Define each term in a project glossary that permeates all software models and their implementation
    - Serves as a dictionary for the ubiquitous language

Domain Model
  - The model and its implementation shape each other and are developed side by side
  - AKA analysis model, represents an OO analysis of the requirements
  - Not a data model
  - Visualized using class diagrams
    - Conceptual classes representation domain objects, attributes, and they do not have methods
  - Association relationships between conceptual classes, usually named to reflect domain terminology

Conceptual Classes
  - Linguistic analysis or natural language modeling
    - Finding nouns in the software requirements
    - Not all nouns are part of the domain
    - Some nouns represent the same thing

Domain Modeling Considerations
  - Start simple, build the domain model iteratively
    - Start with simpler models and expand as needed
  - If a concept can be represented as a simple type(number, string, data) use an attribute instead of a separate concepts

Item-Descriptor Patten
  - A concept may have different meanings depending in which context it is used in
    - "Item" for an inventory system or a point of sale
    - "Item" for a e-commerce web site
    - Ex. serial number is a describing attribute of an item, so it should be in a different class

Relationships Between Concepts
  - Conceptual classes are visualized using associations and generalizations (inheritance)
  - The precise semantics of the association is identified by the name of the association
  - Cardinality : denotes the max number of possible relationship occurrences in which a certain entity can participate (in simple terms: at most)
  - Participation : denotes if all or only some entity occurrences participate in a relationship (simple terms: at least)
  - Multiplicity = Cardinality + Participation

Attributes
  - Are shown in the compartment below the class name
  - Have several characteristics which can be added to the model iteratively as detailed as determined
    - Name
    - Visibility
    - Type
    - Default/Initial Value
    - Property Modifier (read-only)
  - Derived attribute names are prefixed with "/" showing that they can be calculated based on other attributes or relationships
    - /total (calculating total of sale)

Domain Model vs. Domain Layer
  - The layer is the software implementation of the model
  - The layer is a package in the model used in the layered architectures
    - Contains the implementation/software classes that represent the domain concepts defined by the domain model  
