Week 1 - Sept 4, 2019

SDLC - Software Development Life Cycle
  - A detailed plan describing how to develop, maintain, replace and alter or enhance specific software
  - Defines a method for improving the quality of software and the overall development process

Stages of a typical SDLC
  1. Planning and Requirement Analysis
      - Requirement analysis is the most important and fundamental stage in SDLC
      - Information is used to plan the basic project approach and to conduct product feasibility study in the economical, operational and technical areas
  2. Defining Requirements
      - Clearly define and document the product requirements and get them approved from the customer or the market analysts
      - Done through an SRS (Software Requirement Specification) document which consists of all the product requirements to be designed and developed
  3. Designing the Product Architecture
      - SRS is the reference for product architects to come out with the best architecture for the product to be developed
      - Usually more than one design approach for the product architecture is proposed and documented in a DDS (Design Document Specification)
  4. Building or Developing the Product
      - Actual development starts and the product is built
      - Programming code is generated as per DDS during this stage
  5. Testing the Product
      - Subset of all the stages as in the modern SDLC models, the testing activities are mostly involved in all the stages of SDLC
      - This stage refers to the testing only stage of the product where product defects are reported, tracked fixed and retested until the product reaches the quality standards defined in the SRS
  6. Deployment in the Market and Maintenance
      - Once the product is tested and ready to be deployed it is released formally in the appropriate Market

SDLC Models
  - Various SDLC defined and designed which are followed during the software development process
  - Models are referred to as "Software Development Process Models"

Examples of SD process
  - Waterfall Model
  - Iterative Model
  - Spiral Model
  - Agile

Iterative Refinement
  - Create a prototype system early in the development process
  - Review prototype with clients and test it with users, to improve the understanding of the requirements and clarify the design
  - Refine the prototype in a series of iterations
  - Mistakes in the requirements are the most expensive to correct
  - Ex.
      Converting a national archive from paper based to computer based

Spiral Development
  - Create a base system that has the overall structure of the final project with dummy stubs for missing components
  - Create a comprehensive set of test cases for all completed components
  - Use a succession of sprints to develop new or improved components, each with a set of test cases
  - On a daily cycle, build the entire system from the source code library and run the complete set of test cases
  - With this approach there is always a fully tested system, but the functionality is incomplete
  - Ex.
      Developing a new version of an operating system

Agile Development
  - Project is divided into a large number of small tasks, known as sprints
  - A sprint is a set period of time during which a team completes part of a software project
  - For each sprint a team works through a full SDLC including planning, requirement analysis, design, coding, testing, and acceptance testing, and release
  - Each sprint is completed in a fixed time period (e.g. 4 weeks)
  - The size of a sprint is based on team size (e.g. 5-10 people)
  - After each sprint the code maybe:
    - released (original agile method)
    - combined with code from other sprints for subsequent release
    - incorporated into a larger code base (spiral development)

Software Design
  - Requirements specification (functional and non-functional requirements) are about WHAT the system will do
  - Design is about HOW the system will perform its functions

Architectural Design
  - Overall structure: main components and their connections

Detailed Designing
  - Inner structure of main components
  - Take programming language into account

Software Architecture
  - The design process for identifying the sub-systems making up a system and the framework for sub-system control and communication is architectural design
  - The output of this design process is a description of the software architecture
